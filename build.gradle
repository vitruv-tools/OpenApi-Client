/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    
    id "org.openapi.generator" version "4.3.1"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    //Openapi-generator dependencies 
    compile 'com.squareup.okhttp3:okhttp:4.3.1'
    compile 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'io.swagger:swagger-annotations:1.5.22'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'io.gsonfire:gson-fire:1.8.0'
    compile 'javax.xml.bind:jaxb-api:2.3.1'
}    

def vitruvApiYml = "$rootDir/specs/vitruv-client.yaml".toString()

/* java client configuration */
task buildVitruvJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    inputSpec = vitruvApiYml
    outputDir = "$buildDir/java-client".toString()

    groupId = "$project.group"
    id = "$project.name-java-client"
    version = "$project.version"
    apiPackage = "tools.vitruv.openapi.client.api"
    modelPackage = "tools.vitruv.openapi.client.api.model"
    enablePostProcessFile = true
    skipOverwrite = false
    configOptions = [
            java8               : "true",
            dateLibrary         : "java8",
            withXml				: "true"
    ]
    systemProperties = [
            modelDocs: "true"
    ]
}

task generateCode(type: Copy, dependsOn: ['buildVitruvJavaClient']) {

    def srcPath = "$buildDir/java-client"
    def targetPath = "$rootDir/docs"

    // copy docs
    from(srcPath + "/docs")
    into(targetPath)
    include('*.md')

}

// code will be generated during compilation
compileJava.dependsOn(generateCode)


// attach the generated folder as source for this project
sourceSets {
    main {
        java {
            srcDir "$buildDir/java-client/src/main/java"
        }
    }
}